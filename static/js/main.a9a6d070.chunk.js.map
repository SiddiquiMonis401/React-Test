{"version":3,"sources":["ApplicationReducer.js","ActionTypes.js","Context.js","Components/DifficultyDisplayer.js","Components/QuestionComponets.js","Components/ProgressDiv.js","Components/QuizProgress.js","Components/MaximumScore.js","Components/CurrentScore.js","Components/MinimumScore.js","Components/ProgressBarsContainer.js","App.js","serviceWorker.js","index.js"],"names":["AppReducer","state","action","type","questionsAsked","correctAnswer","currentProgress","minIfC","questions","length","minScore","currentProgressW","maxScoreIfW","maxScore","ended","initialState","currentScore","Question","globalContext","createContext","ContextProvider","children","useReducer","dispatch","Provider","value","handleQuestionChange","handleCorrectAnswer","handleWrongAnswer","handleEnd","DifficultyDisplayer","difficulty","map","items","QuestionComponets","props","useState","showNextButton","setShowNextButton","buttonsId","setButtonsId","success","setSuccess","useContext","options","incorrect_answers","correct_answer","sort","useEffect","className","category","question","item","index","disabled","onClick","e","prevState","i","includes","target","console","log","optionClickedHandler","key","ProgressDiv","styled","div","progressValue","QuizProgress","MaximumScore","Math","round","CurrentScore","MinimumScore","ProgressBarsContainer","style","width","App","Context","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a9a6d070.chunk.js","sourcesContent":["import {\r\n  CorrectAnswer,\r\n  WrongAnswer,\r\n  QuestionChange,\r\n  ChangeEnd\r\n} from './ActionTypes'\r\n\r\nexport const AppReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case QuestionChange:\r\n      return { ...state, questionsAsked: (state.questionsAsked += 1) }\r\n    case CorrectAnswer:\r\n      const correctAnswer = (state.correctAnswer += 1)\r\n      const currentProgress = state.correctAnswer / (state.questionsAsked + 1)\r\n      const minIfC = state.correctAnswer / state.questions.length;\r\n      return {\r\n        ...state,\r\n        correctAnswer: correctAnswer,\r\n        currentProgress: currentProgress,\r\n        minScore: minIfC\r\n      }\r\n    case WrongAnswer:\r\n      const currentProgressW = state.correctAnswer / (state.questionsAsked + 1)\r\n      const maxScoreIfW =(state.correctAnswer / state.questions.length)\r\n      return {\r\n        ...state,\r\n        currentProgress: currentProgressW,\r\n        maxScore: maxScoreIfW\r\n      }\r\n    case ChangeEnd:\r\n      return { ...state, ended: true }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","export const CorrectAnswer = 'correct_answer';\r\nexport const WrongAnswer = 'wrong_answer';\r\nexport const QuestionChange = 'question_changed';\r\nexport const ChangeEnd = 'change_End';","import React,{ createContext, useReducer } from 'react';\r\nimport Question from './questions.json';\r\nimport {AppReducer} from './ApplicationReducer'; \r\nimport { CorrectAnswer, WrongAnswer, QuestionChange, ChangeEnd } from './ActionTypes';\r\n\r\nconst initialState = {\r\n    correctAnswer:0,\r\n    questionsAsked:0,\r\n    currentScore:0,\r\n    minScore:0,\r\n    maxScore: 1,\r\n    currentProgress: 0,\r\n    questions: Question,\r\n    ended:false,\r\n}\r\n\r\nexport const globalContext = createContext(initialState);\r\n\r\n\r\n\r\nfunction ContextProvider({children}) {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n    \r\n    // QuestionChange Handler\r\n    const handleQuestionChange = () => {\r\n       dispatch({type: QuestionChange});\r\n    }\r\n    \r\n    // Correct Question Handler\r\n    const handleCorrectAnswer = () => {\r\n       dispatch({type: CorrectAnswer});\r\n    }\r\n\r\n    // Wrong Question Handler\r\n\r\n    const handleWrongAnswer = () => {\r\n        dispatch({type: WrongAnswer});\r\n     }\r\n\r\n    // end handler\r\n    const handleEnd = () => {\r\n        dispatch({type: ChangeEnd});\r\n     } \r\n    return (\r\n     <globalContext.Provider value={{\r\n         state:state,\r\n          handleQuestionChange:handleQuestionChange, \r\n          handleCorrectAnswer: handleCorrectAnswer,\r\n          handleWrongAnswer: handleWrongAnswer,\r\n          handleEnd: handleEnd,\r\n          }}>\r\n         {children}\r\n     </globalContext.Provider>\r\n    );\r\n}\r\n\r\nexport default ContextProvider;","import React from 'react';\r\nimport {AiFillStar,AiOutlineStar} from 'react-icons/ai';\r\n\r\nfunction DifficultyDisplayer({difficulty}) {\r\n    return (\r\n        <div>\r\n            {\r\n             difficulty === 'hard' && ['fill','fill','fill'].map((items) => {\r\n               if(items=== 'fill'){\r\n                   return(\r\n                   <AiFillStar />\r\n                   )\r\n               }\r\n               else{\r\n                   return(<AiOutlineStar />)\r\n               }\r\n             })   \r\n            }\r\n            {\r\n             difficulty === 'medium' && ['fill','fill','outline'].map((items) => {\r\n               if(items=== 'fill'){\r\n                   return(\r\n                   <AiFillStar />\r\n                   )\r\n               }\r\n               else{\r\n                   return(<AiOutlineStar />)\r\n               }\r\n             })   \r\n            }\r\n            {\r\n             difficulty === 'easy' && ['fill','outline','outline'].map((items) => {\r\n               if(items=== 'fill'){\r\n                   return(\r\n                   <AiFillStar />\r\n                   )\r\n               }\r\n               else{\r\n                   return(<AiOutlineStar />)\r\n               }\r\n             })   \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DifficultyDisplayer;","import React, { useContext, useState, useEffect } from 'react'\r\nimport { globalContext } from '../Context'\r\nimport DifficultyDisplayer from './DifficultyDisplayer'\r\n\r\n// css\r\nimport './Question.css'\r\n\r\nfunction QuestionComponets (props) {\r\n  const [showNextButton, setShowNextButton] = useState(false)\r\n  const [buttonsId, setButtonsId] = useState([])\r\n  const [success,setSuccess] = useState(false);\r\n  const {\r\n    state,\r\n    handleQuestionChange,\r\n    handleCorrectAnswer,\r\n    handleWrongAnswer,\r\n    handleEnd\r\n  } = useContext(globalContext)\r\n  const {\r\n    questionsAsked,\r\n    questions,\r\n    ended,\r\n  } = state\r\n  const options = [\r\n    ...questions[questionsAsked].incorrect_answers,\r\n    questions[questionsAsked].correct_answer\r\n  ].sort()\r\n\r\n  // useEffect\r\n  useEffect(() => {\r\n    setButtonsId(\r\n      options.map(() => {\r\n        return 'untouched'\r\n      })\r\n    )\r\n  }, [])\r\n\r\n  // handlers\r\n  const optionClickedHandler = (e, index) => {\r\n    \r\n    setButtonsId(prevState =>\r\n      prevState.map((items, i) => {\r\n        if (i === index) {\r\n          return (items = 'touched')\r\n        } else {\r\n          return items\r\n        }\r\n      })\r\n    )\r\n\r\n\r\n    setShowNextButton(true)\r\n    if (!questions[questionsAsked].incorrect_answers.includes(e.target.value)) {\r\n      console.log('correct reached')\r\n      handleCorrectAnswer()\r\n      setSuccess(true);\r\n    } else {\r\n      setSuccess(false);\r\n      console.log('wrong')\r\n      handleWrongAnswer()\r\n    }\r\n    console.log(buttonsId)\r\n  }\r\n  // nextButtonHandler\r\n  const nextButtonHandler = () => {\r\n    if(questionsAsked === 19){\r\n      handleEnd();\r\n      return;\r\n    }\r\n    setShowNextButton(false)\r\n    handleQuestionChange()\r\n\r\n    setButtonsId(\r\n      options.map(() => {\r\n        return 'untouched'\r\n      }))\r\n    \r\n  }\r\n\r\n  return (\r\n    <div className=\"questions-container\">\r\n      {!ended ?\r\n      (\r\n      <>  \r\n      <h3>{questions[questionsAsked].category}</h3>\r\n      <DifficultyDisplayer difficulty={questions[questionsAsked].difficulty} />\r\n      <h1>Question {questionsAsked + 1} of 20</h1>\r\n      <h3>{questions[questionsAsked].question}</h3>\r\n      <div className=\"options-container\">\r\n        {options.map((item, index) => {\r\n          return (\r\n            <button\r\n              disabled={showNextButton}\r\n              className={\r\n                buttonsId[index] === 'touched' ? 'touched' : 'untouched'\r\n              }\r\n              onClick={e => optionClickedHandler(e, index)}\r\n              value={item}\r\n              key={index}\r\n            >\r\n              {item}\r\n            </button>\r\n          )\r\n        })}\r\n      </div>\r\n      <div className=\"next-button-div\">\r\n        {showNextButton && (\r\n          <>\r\n          <h1>{success ? <>Correct!</> : <>Sorry</>}</h1>\r\n          <button\r\n            onClick={nextButtonHandler}\r\n          >\r\n            Next\r\n          </button>\r\n          </>\r\n        )}\r\n      </div>\r\n      </>):(\r\n        <h1>Ended!</h1>\r\n      )}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default QuestionComponets\r\n","import styled from 'styled-components';\r\n\r\nexport const ProgressDiv = styled.div`\r\n     width: ${props => props.progressValue};\r\n     background-color: tomato;\r\n     height: 20px; \r\n    `;","import React, {useContext} from 'react';\r\nimport {globalContext} from '../Context';\r\nimport {ProgressDiv} from './ProgressDiv';\r\n\r\nfunction QuizProgress(props) {\r\n    const { state: {questionsAsked}} = useContext(globalContext);\r\n    return (\r\n        <div>\r\n        <ProgressDiv progressValue = {`${(questionsAsked +1) * 5}%`} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuizProgress;","import React, {useContext} from 'react';\r\nimport {globalContext} from '../Context';\r\nimport { ProgressDiv } from './ProgressDiv';\r\n\r\nfunction MaximumScore(props) {\r\n    const { state: {maxScore}} = useContext(globalContext);\r\n    return (\r\n        <>\r\n            <h1>Maximum Score {Math.round(maxScore * 100)} %</h1>\r\n            <ProgressDiv progressValue={`${maxScore * 100}%` } />\r\n        </>\r\n        \r\n    );\r\n}\r\n\r\nexport default MaximumScore;","import React, {useContext} from 'react';\r\nimport {globalContext} from '../Context';\r\nimport { ProgressDiv } from './ProgressDiv';\r\n\r\nfunction CurrentScore(props) {\r\n    const { state: {currentProgress}} = useContext(globalContext);\r\n    console.log(currentProgress);\r\n    return (\r\n        <>\r\n        <h1>CurrentScore {Math.round(currentProgress * 100)} %</h1>\r\n        <ProgressDiv progressValue={`${currentProgress * 100}%` } />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CurrentScore;","import React, {useContext} from 'react';\r\nimport {globalContext} from '../Context';\r\nimport { ProgressDiv } from './ProgressDiv';\r\n\r\nfunction MinimumScore(props) {\r\n    const { state: {minScore}} = useContext(globalContext);\r\n    return (\r\n        <>\r\n        <h1>MinimumScore {minScore * 100} %</h1>\r\n        <ProgressDiv progressValue={`${minScore * 100}%` } />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MinimumScore;","import React, { useContext } from 'react'\r\nimport { globalContext } from '../Context'\r\nimport MaximumScore from './MaximumScore'\r\nimport CurrentScore from './CurrentScore'\r\nimport MinimumScore from './MinimumScore'\r\n\r\nfunction ProgressBarsContainer (props) {\r\n  const {\r\n    state: { ended }\r\n  } = useContext(globalContext)\r\n  return (\r\n    <div style={{ width: '100%' }}>\r\n      {!ended ? (\r\n        <>\r\n          <MaximumScore />\r\n          <CurrentScore />\r\n          <MinimumScore />\r\n        </>\r\n      ) : (\r\n        <CurrentScore />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProgressBarsContainer\r\n","import React, {useContext} from 'react';\nimport ContextProvider from './Context';\nimport {globalContext} from './Context';\nimport QuestionComponets from './Components/QuestionComponets';\nimport QuizProgress from './Components/QuizProgress';\nimport MaximumScore from './Components/MaximumScore';\nimport CurrentScore from './Components/CurrentScore';\n\n// Styles css\nimport './App.css'\nimport ProgressBarsContainer from './Components/ProgressBarsContainer';\n\nexport function App(props) {\n  return (\n    <ContextProvider>\n      <div className='app'>\n       <div className='sub-container'>\n       <QuizProgress />\n       <QuestionComponets />\n       <ProgressBarsContainer />        \n       </div> \n      </div>\n    </ContextProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}